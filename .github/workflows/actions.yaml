name: Run Files Sequentially on Windows

on:
  workflow_dispatch: # Allows manual triggering of the workflow
  schedule:
    - cron: "0 * * * *" # Runs every hour

jobs:
  run-files:
    runs-on: windows-latest # Use a Windows runner

    steps:
      # Step 1: Print environment details
      - name: Print Environment Variables
        run: |
          echo ImageOS: ${{ runner.os }}
          echo Version Details:
          systeminfo

      # Step 2: Check out the repository
      - name: Check out repository
        uses: actions/checkout@v3

      # Step 3: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' # Specify a stable Python version

      # Step 4: Install required Python libraries
      - name: Install Python libraries
        run: |
          python -m pip install --upgrade pip
          pip install selenium requests urllib3 regex

      # Step 5: Install Google Chrome
      - name: Install Google Chrome
        run: |
          $LocalTempDir = $env:TEMP; 
          $ChromeInstaller = "ChromeInstaller.exe"; 
          
          # Download the Chrome installer
          (new-object System.Net.WebClient).DownloadFile('http://dl.google.com/chrome/install/375.126/chrome_installer.exe', "$LocalTempDir\$ChromeInstaller"); 
          
          # Run the installer silently
          & "$LocalTempDir\$ChromeInstaller" /silent /install; 
          
          # Monitor the installation process
          $Process2Monitor = "ChromeInstaller"; 
          Do { 
              $ProcessesFound = Get-Process | ?{$Process2Monitor -contains $_.Name} | Select-Object -ExpandProperty Name; 
              If ($ProcessesFound) { 
                  "Still running: $($ProcessesFound -join ', ')" | Write-Host; 
                  Start-Sleep -Seconds 2 
              } else { 
                  # Remove installer after installation is complete
                  rm "$LocalTempDir\$ChromeInstaller" -ErrorAction SilentlyContinue -Verbose 
              } 
          } Until (!$ProcessesFound)

      # Step 6: Verify Chrome Installation
      - name: Verify Chrome Installation
        run: |
          # Verify if Chrome was installed successfully
          if (Get-Command "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" -ErrorAction SilentlyContinue) {
            Write-Host "Google Chrome installed successfully."
          } else {
            Write-Host "Google Chrome installation failed."
            exit 1
          }

      # Step 7: Install ChromeDriver
      - name: Install ChromeDriver
        run: |
          $chrome_version = (Get-ItemProperty "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\Google Chrome").Version
          echo "Installed Chrome version: $chrome_version"

          $chrome_major_version = $chrome_version.Split('.')[0]
          $driver_url = "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_" + $chrome_major_version
          $driver_version = Invoke-RestMethod -Uri $driver_url

          Invoke-WebRequest -Uri "https://chromedriver.storage.googleapis.com/$driver_version/chromedriver_win32.zip" -OutFile chromedriver.zip
          Expand-Archive -Path chromedriver.zip -DestinationPath C:\chromedriver
          set PATH=%PATH%;C:\chromedriver

      # Step 8: Verify ChromeDriver installation
      - name: Verify ChromeDriver installation
        run: |
          chromedriver --version
          "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" --version

      # Step 9: Run the first script
      - name: Extract port number for BG TV
        run: |
          echo "Running first file..."
          python get_bg_portnum.py

      # Step 10: Wait briefly
      - name: Wait briefly
        run: timeout 3

      # Step 11: Run the second script
      - name: Extract tokens for BG TV and renew playlist
        run: |
          echo "Running second file..."
          python make_playlist.py

      # Step 12: Configure Git
      - name: Configure Git
        run: |
          git config --global user.name "mmmw"
          git config --global user.email "mmmw@abv.bg"

      # Step 13: Commit changes
      - name: Commit changes
        run: |
          git add -A
          git commit -m "Automated update: Ran scripts and updated files" || echo "No changes to commit"

      # Step 14: Push changes
      - name: Push changes
        run: |
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
